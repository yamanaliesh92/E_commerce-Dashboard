// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store{
  id String @id @default(uuid())
  name String
  userId String
  billboards   Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  colors  Color[] @relation("StoreToColor")
  sizes Size[] @relation("StoreToSize")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Billboard{
  id String @id @default(uuid())
  label String
  imgUrl String
  storeId String
  store Store @relation("StoreToBillboard",fields: [storeId],references: [id])
  categories Category[] @relation()
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Category{
  id String @id @default(uuid())
  name String
  storeId String
  billboardId String
  billboard Billboard @relation(fields: [billboardId],references: [id])
  store Store @relation("StoreToCategory",fields: [storeId],references: [id])
   products Product[] @relation("CategoryToProduct") 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Size{
  id String @id @default(uuid())
  name String
  storeId String
  value String
  store Store @relation("StoreToSize",fields: [storeId],references: [id])
  products Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color{
  id String @id @default(uuid())
  name String
  storeId String
  value String
  store Store @relation("StoreToColor",fields: [storeId],references: [id])
  products Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


model Product{
  id String @id @default(uuid())
  name String
  storeId String
  store Store @relation("StoreToProduct",fields: [storeId],references: [id])
  price Decimal
  isFeatured Boolean @default(false)
  categoryId String
  category  Category @relation("CategoryToProduct",fields: [categoryId],references: [id])
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId],references: [id])
  orderItems OrderItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  colorId String
  color Color @relation(fields: [colorId],references: [id])
  Images Image[]
}

model Image{
    id String @id @default(uuid())
    productId String
    product Product @relation(fields: [productId],references: [id],onDelete:Cascade)
    url String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Order{
    id String @id @default(uuid())
    storeId String
    store Store @relation("StoreToOrder",fields: [storeId],references: [id])
    address String @default("")
    phone String @default("")
    isPaid Boolean @default(false)
    orderItem OrderItem[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}



model OrderItem{
    id String @id @default(uuid())
    orderId String
    order Order @relation(fields: [orderId],references: [id])

    productId String
    product Product @relation(fields: [productId],references: [id])
  
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}